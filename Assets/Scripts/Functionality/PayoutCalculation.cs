using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class PayoutCalculation : MonoBehaviour
{
    [SerializeField]
    private int x_Distance;
    [SerializeField]
    private int y_Distance;

    [SerializeField]
    private Transform LineContainer;
    [SerializeField]
    private GameObject Line_Prefab;

    [SerializeField]
    private Vector2 InitialLinePosition = new Vector2(-315, 100);

    [SerializeField] internal List<int> LineList;
    [SerializeField] private List<GameObject> LineObjetcs;
    internal List<int> DontDestroyLines = new List<int>();

    internal int CurrentLines;
    internal int LineIndex;

    internal int currentLineIndex;
    GameObject TempObj = null;

    [SerializeField] private GameObject[] activeLineButtons;
    [SerializeField] private GameObject[] inActiveLineButtons;
    [SerializeField] private Button[] left_buttons;
    [SerializeField] private Button[] right_buttons;
    

    private void Start()
    {
        CurrentLines = LineList[LineList.Count - 1];
        LineIndex = LineList.Count - 1;

        currentLineIndex = LineList.Count - 1;
        inActiveLineButtons[LineIndex].SetActive(false);
        activeLineButtons[LineIndex].SetActive(true);

    }

    //generate lines at runtime accordingly
    internal void GeneratePayoutLinesBackend(int index = -1, bool DestroyFirst = true)
    {

        if (DestroyFirst)
            ResetStaticLine();

        if (index >= 0)
        {
            LineObjetcs[index].SetActive(true);
            print("line object name" + LineObjetcs[index].name);
            return;
        }
        DontDestroyLines.Clear();
        for (int i = 0; i < LineList[currentLineIndex]; i++)
        {
            LineObjetcs[i].SetActive(true);


        }


    }

    internal void ToggleLine()
    {
        print("line current index " + currentLineIndex);
        currentLineIndex++;
        if (currentLineIndex == LineList.Count)
        {
            currentLineIndex = 0;
        }
        DontDestroyLines.Clear();
        ResetStaticLine();
        GeneratePayoutLinesBackend(-1);
        SetButtonActive(LineList[currentLineIndex]);
        for (int j = 0; j < LineList.Count; j++)
        {
            activeLineButtons[j].SetActive(false);
            inActiveLineButtons[j].SetActive(true);
        }
        StartCoroutine(setLineIndexImage(currentLineIndex, 0.1f));
    }


    IEnumerator setLineIndexImage(int i, float time)
    {
        inActiveLineButtons[i].SetActive(false);
        yield return new WaitForSeconds(time);
        activeLineButtons[i].SetActive(true);

    }

    internal void SetButtonActive(int LineCounter)
    {
        //currrentLineIndex = LineCounter;

        for (int i = 0; i < LineCounter; i++)
        {
            LineObjetcs[i].SetActive(true);

            left_buttons[i].interactable = true;
            right_buttons[i].interactable = true;
        }


        for (int j = LineCounter; j < left_buttons.Length; j++)
        {
            left_buttons[j].interactable = false;
            right_buttons[j].interactable = false;
        }
    }
    //delete the line generated by button hover
    internal void ResetStaticLine()
    {
        for (int i = 0; i < LineObjetcs.Count; i++)
        {
            if (DontDestroyLines.Contains(i))
                continue;
            else
                LineObjetcs[i].SetActive(false);
        }
    }

}